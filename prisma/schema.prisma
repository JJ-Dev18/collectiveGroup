// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  role           Role      @default(USER)
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  Sales          Sale[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Product {
  id        Int                 @id @default(autoincrement())
  name      String
  price     Decimal
  benefits  BenefitOnProducts[]
  ventas    SaleDetailProduct[]
  createdAt DateTime
  updatedAt DateTime?
}

model BenefitOnProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int // relation scalar field (used in the `@relation` attribute above)
  benefit   Benefit @relation(fields: [benefitId], references: [id])
  benefitId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([productId, benefitId])
}

model Benefit {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime?
  products    BenefitOnProducts[]
}

model Package {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  price        Decimal
  comments    String
  createdAt   DateTime           @default(now())
  services    ServiceOnPackage[]
  ventas SaleDetailPackage[]
  updatedAt   DateTime?
}

model ServiceOnPackage {
  package   Package @relation(fields: [packageId], references: [id])
  packageId Int // relation scalar field (used in the `@relation` attribute above)
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([packageId, serviceId])
}

model Service {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  price        Decimal
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?
  packages    ServiceOnPackage[]
}

model Sale {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [clienteId], references: [id])
  saleProducts      SaleDetailProduct[]
  salePackages    SaleDetailPackage[]
  shippingAddress String?
  paymentResult   String?
  isPaid          Boolean @default(false)
  paidAt          String?
  transactionId   String?
  city            String?
  country         String?
  clienteId Int
  createdAt DateTime     @default(now())
}

model SaleDetailProduct {
  id              Int     @id @default(autoincrement())
  product         Product @relation(fields: [productId], references: [id])
  productId       Int
  sale            Sale    @relation(fields: [saleId], references: [id])
  saleId          Int
  quantity        Int
  price            Decimal
  subtotal        Decimal

 
}

model SaleDetailPackage {
   id              Int     @id @default(autoincrement())
  package         Package @relation(fields: [packageId], references: [id])
  packageId       Int
  sale            Sale    @relation(fields: [saleId], references: [id])
  saleId          Int
  quantity        Int
  price            Decimal
  subtotal        Decimal

}
